{"version":3,"sources":["serviceWorkerRegistration.js","with-auth.jsx","index.js","use-field.js","App.jsx","App.module.css"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","URL","process","href","origin","addEventListener","swUrl","fetch","headers","then","response","contentType","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","message","WrappedComponent","registerMethod","initialValue","useState","value","setValue","useCallback","_","nextValue","DATABASE","dictionary","array","database","set","Set","associations","replacements","withAuth","useField","scheme","handleSchemeChange","mask","handleMaskChange","useDebounce","schemeDebounced","maskDebounced","schemeClean","useMemo","trim","toLowerCase","replace","maskClean","words","schemeParts","split","length","regexParts","every","schemePart","test","push","slice","includes","join","reverse","word","reduce","result","filter","item","regex","RegExp","map","regexPart","maskRegex","index","dictionarySet","has","className","styles","header","Container","Grid","padded","stackable","Row","Column","width","Form","Input","fluid","autoFocus","placeholder","size","onChange","content","i","Label","horizontal","key","classNames","odd","localStorage","getItem","URLSearchParams","search","registerString","registerStringPrev","setItem","ReactDOM","render","document","getElementById","serviceWorkerRegistration","module","exports"],"mappings":"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","file":"static/js/main.3e387873.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useMemo } from 'react';\n\nconst HOSTNAME = 'meltyshev.github.io';\nconst TOKEN = 'Jz2XZA';\n\nexport default (WrappedComponent) => {\n  const Auth = () => {\n    const isAuthenticated = useMemo(() => {\n      if (process.env.NODE_ENV === 'development') {\n        return true;\n      }\n\n      if (localStorage.getItem('registered') === 'true') {\n        return true;\n      }\n\n      return (\n        window.location.hostname === HOSTNAME &&\n        new URLSearchParams(window.location.search).get('token') === TOKEN\n      );\n    }, []);\n\n    if (!isAuthenticated) {\n      return '💁‍♂️';\n    }\n\n    return <WrappedComponent />;\n  };\n\n  return Auth;\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport App from './App';\n\nconst registerString = new URLSearchParams(window.location.search).get('register');\nconst registerStringPrev = localStorage.getItem('registered');\n\nlet registerMethod;\nif (['true', 'false'].includes(registerString)) {\n    const register = registerString === 'true';\n    registerMethod = register ? 'register' : 'unregister';\n\n    if (registerString !== registerStringPrev) {\n        localStorage.setItem('registered', register);\n    }\n} else {\n    registerMethod = registerStringPrev === 'true' ? 'register' : 'unregister';\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorkerRegistration[registerMethod]();\n","import { useCallback, useState } from 'react';\n\nexport default (initialValue) => {\n  const [value, setValue] = useState(initialValue);\n\n  const handleChange = useCallback((_, { value: nextValue }) => {\n    setValue(nextValue);\n  }, []);\n\n  return [value, handleChange, setValue];\n};\n","import React, { useMemo } from 'react';\nimport classNames from 'classnames';\nimport { useDebounce } from 'use-debounce';\nimport { Container, Form, Grid, Input, Label } from 'semantic-ui-react';\n\nimport withAuth from './with-auth';\nimport useField from './use-field';\n\nimport database from './database.json';\nimport replacements from './replacements.json';\n\nimport styles from './App.module.css';\n\nimport 'semantic-ui-css/semantic.min.css';\n\nconst DATABASE = {\n  dictionary: {\n    array: database.dictionary,\n    set: new Set(database.dictionary),\n  },\n  associations: database.associations,\n  replacements,\n};\n\nconst getReplacementsForWord = (word) => {\n  return DATABASE.replacements.reduce((result, words) => {\n    if (words.includes(word)) {\n      return [...result, ...words.filter((item) => item !== word)];\n    }\n\n    return result;\n  }, []);\n};\n\nconst App = () => {\n  const [scheme, handleSchemeChange] = useField('');\n  const [mask, handleMaskChange] = useField('');\n\n  const [schemeDebounced] = useDebounce(scheme, 500);\n  const [maskDebounced] = useDebounce(mask, 500);\n\n  const schemeClean = useMemo(() => schemeDebounced.trim().toLowerCase().replace('ё', 'е'), [\n    schemeDebounced,\n  ]);\n\n  const maskClean = useMemo(() => maskDebounced.trim().toLowerCase().replace('ё', 'е'), [\n    maskDebounced,\n  ]);\n\n  const words = useMemo(() => {\n    const schemeParts = schemeClean.split(/\\s+/);\n    if (schemeParts.length < 2) {\n      return [];\n    }\n\n    const regexParts = [];\n\n    const isValid = schemeParts.every((schemePart) => {\n      if (schemePart) {\n        if (/^[а-я]+!$/.test(schemePart)) {\n          regexParts.push([`${schemePart.slice(0, -1)}`, null]);\n        } else if (/^\\.+$/.test(schemePart)) {\n          regexParts.push([`[а-я]{${schemePart.length}}`, null]);\n        } else if (schemePart === '*') {\n          regexParts.push(['[а-я]+', null]);\n        } else if (schemePart === '?') {\n          regexParts.push(['[а-я]+', DATABASE.dictionary.set]);\n        } else if (/^(([а-я]+,)*[а-я]+$)/.test(schemePart)) {\n          if (schemePart.includes(',')) {\n            regexParts.push([`${schemePart.split(',').join('|')}`, null]);\n          } else {\n            regexParts.push([\n              [\n                ...(schemePart.length > 1 ? [schemePart.split('').reverse().join('')] : []),\n                ...getReplacementsForWord(schemePart),\n                ...(DATABASE.associations[schemePart] || []),\n              ].join('|'),\n              null,\n            ]);\n          }\n        } else {\n          return false;\n        }\n      }\n\n      return true;\n    });\n\n    if (!isValid) {\n      return [];\n    }\n\n    const regex = new RegExp(`^${regexParts.map(([regexPart]) => `(${regexPart})`).join('')}$`);\n\n    let maskRegex = null;\n    if (maskClean) {\n      try {\n        maskRegex = new RegExp(maskClean);\n      } catch {}\n    }\n\n    return DATABASE.dictionary.array.reduce((result, word) => {\n      const match = word.match(regex);\n      if (!match) {\n        return result;\n      }\n\n      if (maskRegex && !maskRegex.test(word)) {\n        return result;\n      }\n\n      const isValid = regexParts.every(([_, dictionarySet], index) => {\n        if (!dictionarySet) {\n          return true;\n        }\n\n        return dictionarySet.has(match[index + 1]);\n      });\n\n      if (isValid) {\n        result.push(match.slice(1).join(' '));\n      }\n\n      return result;\n    }, []);\n  }, [schemeClean, maskClean]);\n\n  return (\n    <>\n      <div className={styles.header}>\n        <Container>\n          <Grid padded stackable>\n            <Grid.Row>\n              <Grid.Column width={8}>\n                <Form>\n                  <Input\n                    fluid\n                    autoFocus\n                    value={scheme}\n                    placeholder=\"Схема\"\n                    size=\"big\"\n                    onChange={handleSchemeChange}\n                  />\n                </Form>\n              </Grid.Column>\n              <Grid.Column width={8}>\n                <Form>\n                  <Input\n                    fluid\n                    value={mask}\n                    placeholder=\"Маска\"\n                    size=\"big\"\n                    onChange={handleMaskChange}\n                  />\n                </Form>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Container>\n      </div>\n      <div className={styles.content}>\n        <Container>\n          <Grid padded>\n            <Grid.Row>\n              <Grid.Column>\n                <div className={styles.words}>\n                  {words.map((word, i) => (\n                    <Label\n                      horizontal\n                      key={word}\n                      className={classNames(styles.word, i % 2 && styles.odd)}\n                    >\n                      {word}\n                    </Label>\n                  ))}\n                </div>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Container>\n      </div>\n    </>\n  );\n};\n\nexport default withAuth(App);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"App_header__3ZZ1n\",\"content\":\"App_content__3La4L\",\"title\":\"App_title__-GfWs\",\"words\":\"App_words__1Oqw2\",\"word\":\"App_word__3aQvw\",\"odd\":\"App_odd__2GTiD\"};"],"sourceRoot":""}